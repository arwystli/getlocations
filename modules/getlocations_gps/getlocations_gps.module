<?php

/**
 * @file
 * getlocations_gps.module
 * @author Bob Hutchinson https://backdropcms.org/account/hutch
 * @copyright GNU GPL
 *
 * Provides a gps facility.
 * for Backdrop
 */

define('GETLOCATIONS_GPS_PATH', backdrop_get_path('module', 'getlocations_gps'));

/**
 * Implements hook_help().
 */
function getlocations_gps_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations_gps':
      $output = '<p>' . t('Provide a gps facility on a map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function getlocations_gps_permission() {
  $perms = array();
  $perms['access getlocations gps'] = array(
    'title' => t('Access Getlocations GPS'),
    'description' => t('View and use the Getlocations_gps module.')
  );
  return $perms;
}

/**
 * Implements hook_config_info().
 */
function getlocations_gps_config_info() {
  $info['getlocations_gps.settings'] = array(
    'label' => t('Getlocations GPS settings'),
    'group' => t('Configuration'),
  );
  $info['getlocations_gps.paths'] = array(
    'label' => t('Getlocations GPS paths'),
    'group' => t('Configuration'),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function getlocations_gps_menu() {
  $items = array();

  $items[GETLOCATIONS_ADMIN_PATH . '/gps'] = array(
    'title' => 'Gps',
    'description' => 'Configure Getlocations gps',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('getlocations_gps_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 14,
    'file' => 'getlocations_gps.admin.inc',
  );
  // ajax callbacks
  $items['getlocations_gps/latlon'] = array(
    'page callback' => 'getlocations_gps_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function getlocations_gps_get_keys() {
  $settings = getlocations_gps_defaults();
  $keys = array_keys($settings);
  return $keys;
}

/**
 * Set up default settings.
 *
 * @return array $newdefaults
 *
 */
function getlocations_gps_defaults() {
  $settings = config_get('getlocations_gps.settings', 'settings');
  return $settings;
}

function getlocations_gps_defaults_set($defaults) {
  $settings = config('getlocations_gps.settings');
  #$keys = array("gps_button", "gps_button_label", "gps_marker_title", "gps_marker", "gps_bubble", "gps_geocode", "gps_center", "gps_type", "gps_zoom", "gps_latlon_path");
  $keys = getlocations_gps_get_keys();
  foreach ($keys AS $k) {
    if (isset($defaults[$k])) {
      $settings->set('settings.' . $k, $defaults[$k]);
    }
  }
  $settings->save();
}

/**
 * Javascript paths.
 * @param bool $reset
 *  Set to true to force reset.
 *
 * @return array
 *
 */
function getlocations_gps_paths_get() {
  $paths = config_get('getlocations_gps.paths', 'paths');
  return $paths;
}

/**
 * @param array $defaults
 *  Settings
 *
 * @param string $mapid
 *  Unique map identifier used in javascript to allow multiple maps
 *
 */
function getlocations_gps_js_settings_do($defaults, $mapid) {
  $keys = getlocations_gps_get_keys();
  $content = array();
  foreach ($keys AS $key) {
    if (isset($defaults[$key])) {
      $content[$key] = $defaults[$key];
    }
  }
  $settings = array($mapid => $content);
  backdrop_add_js(array('getlocations_gps' => $settings), 'setting');
  getlocations_gps_js_do();
}

/**
 * Add js and css to page.
 *
 */
function getlocations_gps_js_do() {
  static $getlocations_gps_js_done = FALSE;
  if (! $getlocations_gps_js_done) {
    $getlocations_gps_paths = getlocations_gps_paths_get();
    backdrop_add_js($getlocations_gps_paths['getlocations_gps_path'], array('weight' => 50));
    backdrop_add_css(GETLOCATIONS_GPS_PATH . '/getlocations_gps.css');
  }
  $getlocations_gps_js_done = TRUE;
}

/**
 * @param array $defaults
 *  Settings
 *
 * Returns form
 *
 */
function getlocations_gps_map_display_options_form($defaults) {

  if (empty($defaults['gps_button_label'])) {
    $getlocations_gps_defaults = getlocations_gps_defaults();
    $keys = getlocations_gps_get_keys();
    foreach ($keys AS $key) {
      if (isset($getlocations_gps_defaults[$key])) {
        $defaults[$key] = $getlocations_gps_defaults[$key];
      }
    }
  }

  $form = _getlocations_gps_map_display_options_form($defaults);
#  $form['#theme'][] = 'getlocations_gps_map_display_options_form';
  return $form;

}

/**
 * Actual settings form.
 *
 */
function _getlocations_gps_map_display_options_form($defaults) {

  $getlocations_gps_paths = getlocations_gps_paths_get();
  backdrop_add_js($getlocations_gps_paths['getlocations_gps_admin_path']);

  $form['gps_button'] = getlocations_element_map_checkbox(
    t('Show GPS button'),
    $defaults['gps_button']
  );
  $form['gps_button']['#suffix'] = '<div id="wrap-getlocations-gps-button">';

  $form['gps_button_label'] = getlocations_element_map_tf(
    t('GPS button label'),
    $defaults['gps_button_label'],
    '',
    30,
    30,
    TRUE
  );
  $markers = getlocations_get_marker_titles();
  $form['gps_marker'] = getlocations_element_map_marker(
    t('GPS Map marker'),
    $markers,
    $defaults['gps_marker'],
    ''
  );
  #$link = getlocations_markerpicker_link($form['gps_marker']['#id'], 'g');
  #$form['gps_marker']['#field_suffix'] = '&nbsp;' . $link;

  $form['gps_marker_title'] = getlocations_element_map_tf(
    t('GPS Marker title'),
    $defaults['gps_marker_title'],
    '',
    30,
    30,
    TRUE
  );

  $form['gps_type'] = getlocations_element_map_checkbox(
    t('Watch the current location'),
    $defaults['gps_type'],
    t('Watch the location supplied by GPS and move the marker when the location changes.')
  );

  $form['gps_geocode'] = getlocations_element_map_checkbox(
    t('Geocode the current location'),
    $defaults['gps_geocode'],
    t('Attempt a reverse Geocode on the location supplied by GPS.')
  );

  $form['gps_bubble'] = getlocations_element_map_checkbox(
    t('Show bubble on GPS Marker click'),
    $defaults['gps_bubble'],
    t('This only applies if the location has been Geocoded.')
  );

  $form['gps_zoom'] = array(
    '#type' => 'select',
    '#title' => t('GPS marker Zoom'),
    '#default_value' => $defaults['gps_zoom'],
    '#options' => array('-1' => t('None')) + backdrop_map_assoc(range(0, 21)),
  );

  $form['gps_center'] = getlocations_element_map_checkbox(
    t('Center the GPS marker on the map'),
    $defaults['gps_center']
  );
  $form['gps_center']['#suffix'] = '</div>';

#  $form['gps_button']['#prefix'] = '<fieldset class="collapsible getlocations_fieldset form-wrapper"><legend><span class="fieldset-legend">' . t('GPS Button') . '</span></legend><div class="fieldset-wrapper">';
#  $tsuf = $form['gps_center']['#suffix'];
#  $form['gps_center']['#suffix'] = $tsuf . '</div></fieldset>';

  return $form;

}

function getlocations_gps_callback() {

  if (isset($_GET['gps_lat']) && ! empty($_GET['gps_lat']) && isset($_GET['gps_lon']) && ! empty($_GET['gps_lon'])) {
    $latlon = $_GET['gps_lat'] . ',' . $_GET['gps_lon'];
    $latlon = getlocations_latlon_check($latlon);
    if (! empty($latlon)) {
      $ll = explode(',', $latlon);
      $lat = (isset( $ll[0]) ? $ll[0] : FALSE);
      $lon = (isset( $ll[1]) ? $ll[1] : FALSE);
      session_start();
      $_SESSION['getlocations_gps'] = array();
      $_SESSION['getlocations_gps']['lat'] = $lat;
      $_SESSION['getlocations_gps']['lon'] = $lon;
    }
  }
  return FALSE;

}

function getlocations_gps_coords() {

  if (isset($_SESSION) && isset($_SESSION['getlocations_gps'])) {
    $lat = $_SESSION['getlocations_gps']['lat'];
    $lon = $_SESSION['getlocations_gps']['lon'];
  }
  if (isset($lat)) {
    $coordinates = array();
    $coordinates['latitude'] = (float) $lat;
    $coordinates['longitude'] = (float) $lon;
    return $coordinates;
  }
  return FALSE;

}

/**
 * Implements hook_theme().
 *
 * This lets us tell Backdrop about our theme functions and their arguments.
 */
function getlocations_gps_theme() {
  $file = array(
    'file' => 'getlocations_gps.theme.inc',
  );

  return array(
    'getlocations_gps_button' => array(
      'variables' => array(
        'defaults' => array(),
        'mapid' => ''
      ),
    ) + $file,
  );
}

#function theme_getlocations_gps_settings_form($variables) {
#  $form = $variables['form'];
#  $output = '';
#  $link = getlocations_markerpicker_link($form['getlocations_gps_defaults']['gps_marker']['#id'], 'g');
#  $form['getlocations_gps_defaults']['gps_marker']['#field_suffix'] = '&nbsp;' . $link;
#
#  $output .= backdrop_render_children($form);
#  return $output;
#}

#function theme_getlocations_gps_map_display_options_form($variables) {
#  $form = $variables['form'];
#  $form['gps_button']['#prefix'] = '<fieldset class="collapsible getlocations_fieldset form-wrapper"><legend><span class="fieldset-legend">' . t('GPS Button') . '</span></legend><div class="fieldset-wrapper">';
#  $tsuf = $form['gps_center']['#suffix'];
#  $form['gps_center']['#suffix'] = $tsuf . '</div></fieldset>';
#  $output = '';
#  $output .= backdrop_render_children($form);
#  return $output;
#}
